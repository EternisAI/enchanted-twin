// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: whatsapp.sql

package whatsapp

import (
	"context"
	"time"
)

const deleteWhatsappMessagesByConversation = `-- name: DeleteWhatsappMessagesByConversation :exec
DELETE FROM whatsapp_messages WHERE conversation_id = ?
`

func (q *Queries) DeleteWhatsappMessagesByConversation(ctx context.Context, conversationID string) error {
	_, err := q.db.ExecContext(ctx, deleteWhatsappMessagesByConversation, conversationID)
	return err
}

const getAllConversationIDs = `-- name: GetAllConversationIDs :many
SELECT DISTINCT conversation_id FROM whatsapp_messages
`

func (q *Queries) GetAllConversationIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllConversationIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var conversation_id string
		if err := rows.Scan(&conversation_id); err != nil {
			return nil, err
		}
		items = append(items, conversation_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestWhatsappMessage = `-- name: GetLatestWhatsappMessage :one
SELECT id, conversation_id, sender_jid, sender_name, content, message_type, sent_at, from_me, created_at
FROM whatsapp_messages 
WHERE conversation_id = ? 
ORDER BY sent_at DESC 
LIMIT 1
`

func (q *Queries) GetLatestWhatsappMessage(ctx context.Context, conversationID string) (WhatsappMessage, error) {
	row := q.db.QueryRowContext(ctx, getLatestWhatsappMessage, conversationID)
	var i WhatsappMessage
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.SenderJid,
		&i.SenderName,
		&i.Content,
		&i.MessageType,
		&i.SentAt,
		&i.FromMe,
		&i.CreatedAt,
	)
	return i, err
}

const getWhatsappMessageCount = `-- name: GetWhatsappMessageCount :one
SELECT COUNT(*) FROM whatsapp_messages WHERE conversation_id = ?
`

func (q *Queries) GetWhatsappMessageCount(ctx context.Context, conversationID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getWhatsappMessageCount, conversationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWhatsappMessagesByConversation = `-- name: GetWhatsappMessagesByConversation :many
SELECT id, conversation_id, sender_jid, sender_name, content, message_type, sent_at, from_me, created_at
FROM whatsapp_messages 
WHERE conversation_id = ? 
ORDER BY sent_at ASC
`

func (q *Queries) GetWhatsappMessagesByConversation(ctx context.Context, conversationID string) ([]WhatsappMessage, error) {
	rows, err := q.db.QueryContext(ctx, getWhatsappMessagesByConversation, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WhatsappMessage{}
	for rows.Next() {
		var i WhatsappMessage
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.SenderJid,
			&i.SenderName,
			&i.Content,
			&i.MessageType,
			&i.SentAt,
			&i.FromMe,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWhatsappMessage = `-- name: InsertWhatsappMessage :exec
INSERT INTO whatsapp_messages (id, conversation_id, sender_jid, sender_name, content, message_type, sent_at, from_me)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertWhatsappMessageParams struct {
	ID             string    `json:"id"`
	ConversationID string    `json:"conversationId"`
	SenderJid      string    `json:"senderJid"`
	SenderName     string    `json:"senderName"`
	Content        string    `json:"content"`
	MessageType    string    `json:"messageType"`
	SentAt         time.Time `json:"sentAt"`
	FromMe         bool      `json:"fromMe"`
}

// WhatsApp message queries
func (q *Queries) InsertWhatsappMessage(ctx context.Context, arg InsertWhatsappMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertWhatsappMessage,
		arg.ID,
		arg.ConversationID,
		arg.SenderJid,
		arg.SenderName,
		arg.Content,
		arg.MessageType,
		arg.SentAt,
		arg.FromMe,
	)
	return err
}
