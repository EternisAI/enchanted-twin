// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: config.sql

package config

import (
	"context"
	"database/sql"
)

const getAllConfigKeys = `-- name: GetAllConfigKeys :many
SELECT key FROM config
`

func (q *Queries) GetAllConfigKeys(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllConfigKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var key string
		if err := rows.Scan(&key); err != nil {
			return nil, err
		}
		items = append(items, key)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigValue = `-- name: GetConfigValue :one
SELECT value FROM config WHERE key = ?
`

// Config queries
func (q *Queries) GetConfigValue(ctx context.Context, key string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getConfigValue, key)
	var value sql.NullString
	err := row.Scan(&value)
	return value, err
}

const setConfigValue = `-- name: SetConfigValue :exec
INSERT OR REPLACE INTO config (key, value) VALUES (?, ?)
`

type SetConfigValueParams struct {
	Key   string         `json:"key"`
	Value sql.NullString `json:"value"`
}

func (q *Queries) SetConfigValue(ctx context.Context, arg SetConfigValueParams) error {
	_, err := q.db.ExecContext(ctx, setConfigValue, arg.Key, arg.Value)
	return err
}
