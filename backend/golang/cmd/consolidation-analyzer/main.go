package main

import (
	"flag"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/EternisAI/enchanted-twin/pkg/agent/memory"
	"github.com/EternisAI/enchanted-twin/pkg/agent/memory/evolvingmemory"
)

func main() {
	var (
		subject    = flag.String("subject", "Physical Health & Fitness", "Subject to consolidate")
		outputFile = flag.String("output", "", "Output JSON file (defaults to subject-YYYYMMDD.json)")
	)
	flag.Parse()

	if *outputFile == "" {
		timestamp := time.Now().Format("20060102")
		*outputFile = fmt.Sprintf("%s-%s.json",
			sanitizeFilename(*subject), timestamp)
	}

	fmt.Printf("📊 Creating sample consolidation report for subject: %s\n", *subject)
	fmt.Printf("💾 Output file: %s\n", *outputFile)

	// Create a sample consolidation report
	report := &evolvingmemory.ConsolidationReport{
		Topic:           *subject,
		Summary:         fmt.Sprintf("This is a sample consolidation report for %s generated by the consolidation analyzer tool.", *subject),
		SourceFactCount: 10,
		GeneratedAt:     time.Now(),
		ConsolidatedFacts: []*evolvingmemory.ConsolidationFact{
			{
				MemoryFact: memory.MemoryFact{
					ID:          uuid.New().String(),
					Content:     fmt.Sprintf("Sample consolidated fact about %s", *subject),
					Category:    "sample",
					Subject:     *subject,
					Attribute:   "sample_attribute",
					Value:       "sample value",
					Importance:  2,
					Sensitivity: "low",
					Timestamp:   time.Now(),
					Source:      "consolidation_analyzer",
					Metadata: map[string]string{
						"tool":        "consolidation_analyzer",
						"sample_data": "true",
					},
				},
				ConsolidatedFrom: []string{
					uuid.New().String(),
					uuid.New().String(),
					uuid.New().String(),
				},
			},
			{
				MemoryFact: memory.MemoryFact{
					ID:          uuid.New().String(),
					Content:     fmt.Sprintf("Another sample fact about %s patterns", *subject),
					Category:    "pattern",
					Subject:     *subject,
					Attribute:   "pattern_recognition",
					Value:       "identified recurring themes",
					Importance:  3,
					Sensitivity: "medium",
					Timestamp:   time.Now().Add(-24 * time.Hour),
					Source:      "consolidation_analyzer",
					Metadata: map[string]string{
						"tool":       "consolidation_analyzer",
						"confidence": "0.85",
					},
				},
				ConsolidatedFrom: []string{
					uuid.New().String(),
					uuid.New().String(),
				},
			},
		},
	}

	// Export the report using the utility function - THIS IS THE KEY USAGE!
	if err := report.ExportJSON(*outputFile); err != nil {
		fmt.Printf("❌ Failed to export report: %v\n", err)
		return
	}

	fmt.Printf("✅ Sample consolidation report created and exported!\n")
	fmt.Printf("📊 Source facts: %d\n", report.SourceFactCount)
	fmt.Printf("🧠 Consolidated facts: %d\n", len(report.ConsolidatedFacts))
	fmt.Printf("💾 Report saved to: %s\n", *outputFile)
	fmt.Printf("🔧 This tool demonstrates the ExportJSON utility function usage.\n")

	// Show summary
	if report.Summary != "" {
		fmt.Printf("\n📝 Summary:\n%s\n", report.Summary)
	}
}

func sanitizeFilename(s string) string {
	// Replace spaces and special characters with hyphens
	result := ""
	for _, r := range s {
		if (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z') || (r >= '0' && r <= '9') {
			result += string(r)
		} else if r == ' ' || r == '&' || r == '/' {
			result += "-"
		}
	}
	return result
}
