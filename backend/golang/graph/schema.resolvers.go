package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"sort"
	"strconv"
	"time"

	"github.com/EternisAI/enchanted-twin/graph/model"
	"github.com/EternisAI/enchanted-twin/pkg/agent/scheduler"
	"github.com/EternisAI/enchanted-twin/pkg/auth"
	"github.com/EternisAI/enchanted-twin/pkg/dataprocessing/workflows"
	"github.com/EternisAI/enchanted-twin/pkg/helpers"
	"github.com/EternisAI/enchanted-twin/pkg/telegram"
	"github.com/EternisAI/enchanted-twin/pkg/whatsapp"
	"github.com/google/uuid"
	"github.com/lnquy/cron"
	nats "github.com/nats-io/nats.go"
	common "go.temporal.io/api/common/v1"
	"go.temporal.io/sdk/client"
)

// Messages is the resolver for the messages field.
func (r *chatResolver) Messages(ctx context.Context, obj *model.Chat) ([]*model.Message, error) {
	return r.TwinChatService.GetMessagesByChatId(ctx, obj.ID)
}

// StartOAuthFlow is the resolver for the startOAuthFlow field.
func (r *mutationResolver) StartOAuthFlow(ctx context.Context, provider string, scope string) (*model.OAuthFlow, error) {
	auth, redir, err := auth.StartOAuthFlow(ctx, r.Logger, r.Store, provider, scope)
	return &model.OAuthFlow{
		AuthURL:     auth,
		RedirectURI: redir,
	}, err
}

// CompleteOAuthFlow is the resolver for the completeOAuthFlow field.
func (r *mutationResolver) CompleteOAuthFlow(ctx context.Context, state string, authCode string) (string, error) {
	result, username, err := auth.CompleteOAuthFlow(ctx, r.Logger, r.Store, state, authCode)
	if err != nil {
		return "", err
	}

	switch result {
	case "twitter":
		_, err = r.MCPService.ConnectMCPServerIfNotExists(ctx, model.ConnectMCPServerInput{
			Name:    model.MCPServerTypeTwitter.String(),
			Command: "npx",
			Args:    []string{},
			Envs:    []*model.KeyValueInput{},
			Type:    model.MCPServerTypeTwitter,
		})
		if err != nil {
			return "", fmt.Errorf("oauth successful but failed to create Twitter server: %w", err)
		}

		err = helpers.CreateScheduleIfNotExists(
			r.Logger,
			r.TemporalClient,
			"refresh-twitter-token",
			time.Minute*30,
			auth.TokenRefreshWorkflow,
			[]any{auth.TokenRefreshWorkflowInput{Provider: "twitter"}},
		)
		if err != nil {
			r.Logger.Error("Error creating schedule", "error", err)
			return "", err
		}

		err = helpers.CreateScheduleIfNotExists(
			r.Logger,
			r.TemporalClient,
			"x-sync-schedule",
			time.Minute*10,
			"XSyncWorkflow",
			[]any{workflows.XSyncWorkflowInput{Username: username}},
		)
		if err != nil {
			r.Logger.Error("Error creating schedule", "error", err)
			return "", err
		}

	case "google":
		// Remote authentication is now handled automatically by the holon service
		// when it's initialized, so we don't need to do it here anymore

		_, err = r.MCPService.ConnectMCPServerIfNotExists(ctx, model.ConnectMCPServerInput{
			Name:    model.MCPServerTypeGoogle.String(),
			Command: "npx",
			Args:    []string{},
			Envs:    []*model.KeyValueInput{},
			Type:    model.MCPServerTypeGoogle,
		})
		if err != nil {
			return "", fmt.Errorf("oauth successful but failed to create Google server: %w", err)
		}

		err = helpers.CreateScheduleIfNotExists(
			r.Logger,
			r.TemporalClient,
			"refresh-gmail-token",
			time.Minute*30,
			auth.TokenRefreshWorkflow,
			[]any{auth.TokenRefreshWorkflowInput{Provider: "google"}},
		)
		if err != nil {
			r.Logger.Error("Error creating schedule", "error", err)
			return "", err
		}

		err = helpers.CreateScheduleIfNotExists(
			r.Logger,
			r.TemporalClient,
			"gmail-sync-schedule",
			time.Minute*2,
			"GmailSyncWorkflow",
			[]any{workflows.GmailSyncWorkflowInput{Username: username}},
		)
		if err != nil {
			r.Logger.Error("Error creating schedule", "error", err)
			return "", err
		}

		options := client.StartWorkflowOptions{
			ID:        "gmail-history-workflow",
			TaskQueue: "default",
		}
		input := workflows.GmailHistoryWorkflowInput{
			Username: username,
		}

		_, err = (r.TemporalClient).ExecuteWorkflow(
			ctx,
			options,
			"GmailHistoryWorkflow",
			input,
		)
		if err != nil {
			return "", fmt.Errorf("error executing workflow: %v", err)
		}

	case "slack":
		_, err = r.MCPService.ConnectMCPServerIfNotExists(ctx, model.ConnectMCPServerInput{
			Name:    model.MCPServerTypeSLACk.String(),
			Command: "npx",
			Args:    []string{},
			Envs:    []*model.KeyValueInput{},
			Type:    model.MCPServerTypeSLACk,
		})
		if err != nil {
			return "", fmt.Errorf("oauth successful but failed to create Slack server: %w", err)
		}

		err = helpers.CreateScheduleIfNotExists(
			r.Logger,
			r.TemporalClient,
			"slack-sync-schedule",
			time.Minute*2,
			"SlackSyncWorkflow",
			[]any{},
		)
		if err != nil {
			r.Logger.Error("Error creating schedule", "error", err)
			return "", err
		}

	default:
		// Nothing to do
	}

	return result, err
}

// RefreshExpiredOAuthTokens is the resolver for the refreshExpiredOAuthTokens field.
func (r *mutationResolver) RefreshExpiredOAuthTokens(ctx context.Context) ([]*model.OAuthStatus, error) {
	dbResults, err := auth.RefreshExpiredTokens(ctx, r.Logger, r.Store)
	if err != nil {
		return nil, err
	}
	results := make([]*model.OAuthStatus, len(dbResults))
	for i, item := range dbResults {
		db := item.ToModel()
		results[i] = &db
	}
	return results, nil
}

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input model.UpdateProfileInput) (bool, error) {
	// Use SQLite for profile updates
	return r.Store.UpdateUserProfile(ctx, input)
}

// CreateChat is the resolver for the createChat field.
func (r *mutationResolver) CreateChat(ctx context.Context, name string, category model.ChatCategory, holonThreadID *string) (*model.Chat, error) {
	chat, err := r.TwinChatService.CreateChat(ctx, name, category, holonThreadID)
	if err != nil {
		return nil, err
	}
	return &chat, nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, chatID string, text string, reasoning bool, voice bool) (*model.Message, error) {
	subject := fmt.Sprintf("chat.%s", chatID)

	userMessageJson, err := json.Marshal(model.Message{
		ID:        uuid.New().String(),
		Text:      &text,
		CreatedAt: time.Now().Format(time.RFC3339),
		Role:      model.RoleUser,
	})
	if err != nil {
		return nil, err
	}
	err = r.Nc.Publish(subject, userMessageJson)
	if err != nil {
		return nil, err
	}

	return r.TwinChatService.SendMessage(ctx, chatID, text, reasoning, voice)
}

// DeleteChat is the resolver for the deleteChat field.
func (r *mutationResolver) DeleteChat(ctx context.Context, chatID string) (*model.Chat, error) {
	chat, err := r.TwinChatService.GetChat(ctx, chatID)
	if err != nil {
		return nil, fmt.Errorf("chat not found")
	}

	err = r.TwinChatService.DeleteChat(ctx, chatID)
	if err != nil {
		return nil, err
	}

	return &chat, nil
}

// StartIndexing is the resolver for the startIndexing field.
func (r *mutationResolver) StartIndexing(ctx context.Context) (bool, error) {
	options := client.StartWorkflowOptions{
		ID:        "index",
		TaskQueue: "default",
	}
	_, err := (r.TemporalClient).ExecuteWorkflow(
		ctx,
		options,
		"InitializeWorkflow",
		map[string]any{},
	)
	if err != nil {
		return false, fmt.Errorf("error executing workflow: %v", err)
	}

	return true, nil
}

// AddDataSource is the resolver for the addDataSource field.
func (r *mutationResolver) AddDataSource(ctx context.Context, name string, path string) (bool, error) {
	_, err := r.Store.CreateDataSource(ctx, uuid.New().String(), name, path)
	if err != nil {
		return false, err
	}
	return true, nil
}

// DeleteDataSource is the resolver for the deleteDataSource field.
func (r *mutationResolver) DeleteDataSource(ctx context.Context, id string) (bool, error) {
	result, err := r.Store.DeleteDataSource(ctx, id)
	if err != nil {
		return false, err
	}

	return result != nil, nil
}

// ConnectMCPServer is the resolver for the connectMCPServer field.
func (r *mutationResolver) ConnectMCPServer(ctx context.Context, input model.ConnectMCPServerInput) (bool, error) {
	_, err := r.MCPService.ConnectMCPServer(ctx, input)
	if err != nil {
		return false, err
	}
	return true, nil
}

// SendTelegramMessage is the resolver for the sendTelegramMessage field.
func (r *mutationResolver) SendTelegramMessage(ctx context.Context, chatUUID string, text string) (bool, error) {
	chatID, err := r.TelegramService.GetChatIDFromChatUUID(ctx, chatUUID)
	if err != nil || chatID == 0 {
		return false, fmt.Errorf("failed to get telegram chat ID: %w", err)
	}

	err = r.TelegramService.SendMessage(ctx, chatID, text)
	if err != nil {
		return false, fmt.Errorf("failed to send telegram message: %w", err)
	}

	return true, nil
}

// DeleteAgentTask is the resolver for the deleteAgentTask field.
func (r *mutationResolver) DeleteAgentTask(ctx context.Context, id string) (bool, error) {
	handle := r.TemporalClient.ScheduleClient().GetHandle(ctx, id)

	if handle == nil {
		return false, fmt.Errorf("agent task not found")
	}

	err := handle.Delete(ctx)
	if err != nil {
		return false, err
	}

	return true, nil
}

// UpdateAgentTask sets the Notify flag for the given schedule.
func (r *mutationResolver) UpdateAgentTask(ctx context.Context, id string, notify bool) (bool, error) {
	h := r.TemporalClient.ScheduleClient().GetHandle(ctx, id)
	err := h.Update(ctx, client.ScheduleUpdateOptions{
		DoUpdate: func(in client.ScheduleUpdateInput) (*client.ScheduleUpdate, error) {
			sched := in.Description.Schedule
			wfAct, ok := sched.Action.(*client.ScheduleWorkflowAction)
			if !ok || len(wfAct.Args) == 0 {
				return nil, fmt.Errorf("schedule %q has no workflow args", id)
			}

			pl, ok := wfAct.Args[0].(*common.Payload)
			if !ok {
				return nil, fmt.Errorf("first arg not *common.Payload")
			}

			var arg scheduler.TaskScheduleWorkflowInput
			if err := json.Unmarshal(pl.Data, &arg); err != nil {
				return nil, err
			}
			arg.Notify = notify

			raw, err := json.Marshal(arg)
			if err != nil {
				return nil, err
			}
			pl.Data = raw
			return &client.ScheduleUpdate{Schedule: &sched}, nil
		},
	})
	if err != nil {
		return false, err
	}
	return true, nil
}

// RemoveMCPServer is the resolver for the removeMCPServer field.
func (r *mutationResolver) RemoveMCPServer(ctx context.Context, id string) (bool, error) {
	err := r.MCPService.RemoveMCPServer(ctx, id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// StartWhatsAppConnection is the resolver for the startWhatsAppConnection field.
func (r *mutationResolver) StartWhatsAppConnection(ctx context.Context) (bool, error) {
	connectChan := whatsapp.GetConnectChannel()
	select {
	case connectChan <- struct{}{}:
		r.Logger.Info("Triggered WhatsApp connection start")
		return true, nil
	default:
		go func() {
			connectChan <- struct{}{}
		}()
		r.Logger.Info("Triggered WhatsApp connection start (async)")
		return true, nil
	}
}

// Activate is the resolver for the activate field.
func (r *mutationResolver) Activate(ctx context.Context, inviteCode string) (bool, error) {
	return auth.Activate(ctx, r.Logger, r.Store, inviteCode)
}

// JoinHolon is the resolver for the joinHolon field.
func (r *mutationResolver) JoinHolon(ctx context.Context, userID string, network *string) (bool, error) {
	networkName := "HolonNetwork"
	if network != nil && *network != "" {
		networkName = *network
	}

	err := r.HolonService.JoinHolonNetwork(ctx, userID, networkName)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*model.UserProfile, error) {
	if r.Store == nil {
		panic("Store not initialized")
	}

	profile, err := r.Store.GetUserProfile(ctx)
	if err != nil {
		return nil, err
	}

	return profile, nil
}

// GetChats is the resolver for the getChats field.
func (r *queryResolver) GetChats(ctx context.Context, first int32, offset int32) ([]*model.Chat, error) {
	chats, err := r.TwinChatService.GetChats(ctx)
	if err != nil {
		return nil, err
	}
	return chats, nil
}

// GetChat is the resolver for the getChat field.
func (r *queryResolver) GetChat(ctx context.Context, id string) (*model.Chat, error) {
	chat, err := r.TwinChatService.GetChat(ctx, id)
	if err != nil {
		return nil, err
	}
	return &chat, nil
}

// GetDataSources is the resolver for the getDataSources field.
func (r *queryResolver) GetDataSources(ctx context.Context) ([]*model.DataSource, error) {
	dbDataSources, err := r.Store.GetDataSources(ctx)
	if err != nil {
		return nil, err
	}

	modelDataSources := make([]*model.DataSource, len(dbDataSources))
	for i, ds := range dbDataSources {
		modelDataSources[i] = &model.DataSource{
			ID:        ds.ID,
			Name:      ds.Name,
			Path:      ds.Path,
			UpdatedAt: ds.UpdatedAt,
			IsIndexed: ds.IsIndexed != nil && *ds.IsIndexed,
		}
	}
	return modelDataSources, nil
}

// GetOAuthStatus is the resolver for the getOAuthStatus field.
func (r *queryResolver) GetOAuthStatus(ctx context.Context) ([]*model.OAuthStatus, error) {
	dbResults, err := r.Store.GetOAuthStatus(ctx)
	if err != nil {
		return nil, err
	}
	results := make([]*model.OAuthStatus, len(dbResults))
	for i, item := range dbResults {
		db := item.ToModel()
		results[i] = &db
	}
	return results, nil
}

// GetChatSuggestions is the resolver for the getChatSuggestions field.
func (r *queryResolver) GetChatSuggestions(ctx context.Context, chatID string) ([]*model.ChatSuggestionsCategory, error) {
	return r.TwinChatService.GetChatSuggestions(ctx, chatID)
}

// GetMCPServers is the resolver for the getMCPServers field.
func (r *queryResolver) GetMCPServers(ctx context.Context) ([]*model.MCPServerDefinition, error) {
	return r.MCPService.GetMCPServers(ctx)
}

// GetTools is the resolver for the getTools field.
func (r *queryResolver) GetTools(ctx context.Context) ([]*model.Tool, error) {
	tools, err := r.MCPService.GetTools(ctx)
	if err != nil {
		return nil, err
	}

	toolsDefinitions := make([]*model.Tool, len(tools))
	for i, tool := range tools {
		toolsDefinitions[i] = &model.Tool{
			Name:        tool.Name,
			Description: *tool.Description,
		}
	}
	return toolsDefinitions, nil
}

// GetWhatsAppStatus is the resolver for the getWhatsAppStatus field.
func (r *queryResolver) GetWhatsAppStatus(ctx context.Context) (*model.WhatsAppStatus, error) {
	// Get the latest QR event to ensure we have the most up-to-date information
	latestQREvent := whatsapp.GetLatestQREvent()

	isConnected := r.WhatsAppConnected
	var qrCodeData *string

	// If we have a latest QR event, use its data
	if latestQREvent != nil {
		switch latestQREvent.Event {
		case "success":
			isConnected = true
			qrCodeData = nil
		case "code":
			isConnected = false
			qrCodeData = &latestQREvent.Code
		}
	} else {
		qrCodeData = r.WhatsAppQRCode
	}

	statusMessage := ""
	if isConnected {
		statusMessage = "WhatsApp is connected and ready."
	} else if qrCodeData != nil {
		statusMessage = "Scan the QR code to connect WhatsApp."
	} else {
		statusMessage = "Start WhatsApp connection to get a QR code."
	}

	return &model.WhatsAppStatus{
		IsConnected:   isConnected,
		QRCodeData:    qrCodeData,
		StatusMessage: statusMessage,
	}, nil
}

// GetAgentTasks is the resolver for the getAgentTasks field.
func (r *queryResolver) GetAgentTasks(ctx context.Context) ([]*model.AgentTask, error) {
	iterator, err := r.TemporalClient.ScheduleClient().List(ctx, client.ScheduleListOptions{})
	if err != nil {
		return nil, err
	}

	agentTasks := make([]*model.AgentTask, 0)
	for iterator.HasNext() {
		schedule, err := iterator.Next()
		if err != nil {
			return nil, err
		}

		if schedule == nil {
			continue
		}

		if schedule.WorkflowType.Name != "TaskScheduleWorkflow" {
			continue
		}

		handle := r.TemporalClient.ScheduleClient().GetHandle(ctx, schedule.ID)
		desc, err := handle.Describe(ctx)
		if err != nil {
			return nil, err
		}
		createdAt := desc.Info.CreatedAt.Format(time.RFC3339)
		updatedAt := desc.Info.LastUpdateAt.Format(time.RFC3339)

		var wfArgsData scheduler.TaskScheduleWorkflowInput
		if wf, ok := desc.Schedule.Action.(*client.ScheduleWorkflowAction); ok {
			for i, arg := range wf.Args {
				if payload, ok := arg.(*common.Payload); ok {
					err := json.Unmarshal(payload.Data, &wfArgsData)
					if err != nil {
						fmt.Printf("json.Unmarshal error: %v\n", err)
						return nil, err
					}
				} else {
					r.Logger.Debug("wf.Args[%d] is NOT *common.Payload, type: %T\n", i, arg)
				}
			}
		}

		scheduleStr := ""
		if wfArgsData.Delay > 0 {
			if len(schedule.NextActionTimes) == 0 {
				continue
			}
			nextActionTime := schedule.NextActionTimes[0]
			now := time.Now()
			nextExecutingIn := nextActionTime.Sub(now)
			days := int(nextExecutingIn.Hours()) / 24
			hours := int(nextExecutingIn.Hours()) % 24
			minutes := int(nextExecutingIn.Minutes()) % 60

			switch {
			case days > 0 && hours > 0:
				scheduleStr += fmt.Sprintf("In %d Days %d Hours %d Minutes", days, hours, minutes)
			case days > 0:
				scheduleStr += fmt.Sprintf("In %d Days %d Minutes", days, minutes)
			case hours > 0:
				scheduleStr += fmt.Sprintf("In %d Hours %d Minutes", hours, minutes)
			default:
				scheduleStr += fmt.Sprintf("In %d Minutes", minutes)
			}
		} else {
			exprDesc, _ := cron.NewDescriptor()
			cronDesc, err := exprDesc.ToDescription(wfArgsData.Cron, cron.Locale_en)
			if err != nil {
				r.Logger.Error("Failed to get cron description", "error", err)
				continue
			}
			scheduleStr = cronDesc
		}

		task := &model.AgentTask{
			ID:           schedule.ID,
			Name:         wfArgsData.Name,
			Schedule:     scheduleStr,
			Plan:         helpers.Ptr(wfArgsData.Task),
			CreatedAt:    createdAt,
			UpdatedAt:    updatedAt,
			CompletedAt:  nil,
			TerminatedAt: nil,
			Output:       nil,
			Notify:       wfArgsData.Notify,
		}
		agentTasks = append(agentTasks, task)
	}
	sort.Slice(agentTasks, func(i, j int) bool {
		return agentTasks[i].ID > agentTasks[j].ID
	})
	return agentTasks, nil
}

// GetSetupProgress is the resolver for the getSetupProgress field.
func (r *queryResolver) GetSetupProgress(ctx context.Context) ([]*model.SetupProgress, error) {
	type subjectInfo struct {
		subject  string
		name     string
		required bool
	}
	subjects := []subjectInfo{
		{"setup_progress.kokoro", "kokoro", false},
		{"setup_progress.postgres", "postgres", true},
	}
	results := make([]*model.SetupProgress, 0, len(subjects))

	for _, s := range subjects {
		msg, err := r.Nc.Request(s.subject, nil, 250*time.Millisecond)
		if err != nil || msg == nil {
			results = append(results, &model.SetupProgress{Name: s.name, Progress: 0, Required: s.required})
			continue
		}
		var progress model.SetupProgress
		if err := json.Unmarshal(msg.Data, &progress); err != nil {
			results = append(results, &model.SetupProgress{Name: s.name, Progress: 0, Required: s.required})
			continue
		}
		results = append(results, &progress)
	}
	return results, nil
}

// WhitelistStatus is the resolver for the whitelistStatus field.
func (r *queryResolver) WhitelistStatus(ctx context.Context) (bool, error) {
	return auth.IsWhitelisted(ctx, r.Logger, r.Store)
}

// GetHolons is the resolver for the getHolons field.
func (r *queryResolver) GetHolons(ctx context.Context, userID string) ([]string, error) {
	return r.HolonService.GetHolons(ctx, userID)
}

// GetThreads is the resolver for the getThreads field.
func (r *queryResolver) GetThreads(ctx context.Context, network *string, first int32, offset int32) ([]*model.Thread, error) {
	return r.HolonService.GetThreads(ctx, first, offset)
}

// GetThread is the resolver for the getThread field.
func (r *queryResolver) GetThread(ctx context.Context, network *string, id string) (*model.Thread, error) {
	return r.HolonService.GetThread(ctx, id)
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, chatID string) (<-chan *model.Message, error) {
	messages := make(chan *model.Message)
	subject := fmt.Sprintf("chat.%s", chatID)

	sub, err := r.Nc.Subscribe(subject, func(msg *nats.Msg) {
		var message model.Message
		err := json.Unmarshal(msg.Data, &message)
		if err != nil {
			r.Logger.Info("unmarshal error", "Error parsing message: %v", err)
			return
		}

		messages <- &message
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(messages)
	}()

	return messages, nil
}

// ToolCallUpdated is the resolver for the toolCallUpdated field.
func (r *subscriptionResolver) ToolCallUpdated(ctx context.Context, chatID string) (<-chan *model.ToolCall, error) {
	toolCalls := make(chan *model.ToolCall)
	subject := fmt.Sprintf("chat.%s.tool_call", chatID)

	sub, err := r.Nc.Subscribe(subject, func(msg *nats.Msg) {
		var toolCall model.ToolCall
		err := json.Unmarshal(msg.Data, &toolCall)
		if err != nil {
			r.Logger.Info("unmarshal error", "Error parsing message: %v", err)
			return
		}

		toolCalls <- &toolCall
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(toolCalls)
	}()

	return toolCalls, nil
}

// IndexingStatus is the resolver for the indexingStatus field.
func (r *subscriptionResolver) IndexingStatus(ctx context.Context) (<-chan *model.IndexingStatus, error) {
	if r.Nc == nil {
		return nil, errors.New("NATS connection is nil")
	}

	if !r.Nc.IsConnected() {
		return nil, errors.New("NATS connection is not connected")
	}

	r.Logger.Info("Subscribing to indexing status",
		"connected", r.Nc.IsConnected(),
		"status", r.Nc.Status().String())

	statusChan := make(chan *model.IndexingStatus, 100)
	subject := "indexing_data"

	sub, err := r.Nc.Subscribe(subject, func(msg *nats.Msg) {
		var status model.IndexingStatus
		err := json.Unmarshal(msg.Data, &status)
		if err != nil {
			r.Logger.Error("Failed to unmarshal indexing status",
				"error", err,
				"data", string(msg.Data))
			return
		}

		select {
		case statusChan <- &status:
		case <-ctx.Done():
			r.Logger.Info("Context canceled while sending status", "subject", msg.Subject)
			return
		default:
			r.Logger.Warn("Status channel is full, dropping message", "subject", msg.Subject)
		}
	})
	if err != nil {
		r.Logger.Error("Failed to subscribe to indexing status",
			"error", err,
			"subject", subject,
			"connected", r.Nc.IsConnected(),
			"status", r.Nc.Status().String())
		return nil, err
	}

	go func() {
		<-ctx.Done()
		r.Logger.Info("Unsubscribing from indexing status",
			"subject", subject,
			"connected", r.Nc.IsConnected(),
			"status", r.Nc.Status().String())
		if err := sub.Unsubscribe(); err != nil {
			r.Logger.Error("Error unsubscribing", "error", err)
		}
		close(statusChan)
	}()

	return statusChan, nil
}

// NotificationAdded is the resolver for the notificationAdded field.
func (r *subscriptionResolver) NotificationAdded(ctx context.Context) (<-chan *model.AppNotification, error) {
	notificationChan := make(chan *model.AppNotification, 10)
	subject := "notifications.app"

	sub, err := r.Nc.Subscribe(subject, func(msg *nats.Msg) {
		var notification model.AppNotification
		if err := json.Unmarshal(msg.Data, &notification); err != nil {
			return
		}
		notificationChan <- &notification
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(notificationChan)
	}()

	return notificationChan, nil
}

// TelegramMessageAdded is the resolver for the telegramMessageAdded field.
func (r *subscriptionResolver) TelegramMessageAdded(ctx context.Context, chatUUID string) (<-chan *model.Message, error) {
	if r.Nc == nil {
		return nil, errors.New("NATS connection is not initialized")
	}
	chatID, err := r.TelegramService.GetChatIDFromChatUUID(ctx, chatUUID)
	if err != nil {
		return nil, fmt.Errorf("failed to get telegram chat ID: %w", err)
	}
	fmt.Println("Telegram message added", "chat_id", chatID)

	if chatID != 0 {
		confirmText := fmt.Sprintf("Telegram connection established. Chat ID: %d", chatID)
		confirmMsg := &model.Message{
			ID:          uuid.New().String(),
			Text:        &confirmText,
			CreatedAt:   time.Now().Format(time.RFC3339),
			Role:        model.RoleAssistant,
			ImageUrls:   []string{},
			ToolCalls:   []*model.ToolCall{},
			ToolResults: []string{},
		}

		confirmData, _ := json.Marshal(confirmMsg)
		err := r.Nc.Publish(fmt.Sprintf("telegram.chat.%d", chatID), confirmData)
		if err != nil {
			r.Logger.Error("Failed to publish confirmation message", "error", err)
		}
	}

	messages := make(chan *model.Message, 100)

	subject := fmt.Sprintf("telegram.chat.%d", chatID)

	sub, err := r.Nc.Subscribe(subject, func(msg *nats.Msg) {
		if msg == nil || msg.Data == nil {
			r.Logger.Error("Received nil message or data")
			return
		}

		var telegramMessage telegram.Message
		if err := json.Unmarshal(msg.Data, &telegramMessage); err != nil {
			r.Logger.Error("Failed to unmarshal Telegram message", "error", err)
			return
		}

		text := telegramMessage.Text
		message := &model.Message{
			ID:          strconv.Itoa(telegramMessage.MessageID),
			Text:        &text,
			CreatedAt:   time.Unix(int64(telegramMessage.Date), 0).Format(time.RFC3339),
			Role:        model.RoleUser,
			ImageUrls:   []string{},
			ToolCalls:   []*model.ToolCall{},
			ToolResults: []string{},
		}

		select {
		case messages <- message:
			r.Logger.Info("Sent message to channel", "chat_id", chatID)
		case <-ctx.Done():
			r.Logger.Info("Context canceled while sending message", "chat_id", chatID)
			return
		default:
			r.Logger.Warn("Message channel is full, dropping message", "chat_id", chatID)
		}
	})
	if err != nil {
		close(messages)
		return nil, fmt.Errorf("failed to subscribe to NATS subject: %w", err)
	}

	go func() {
		<-ctx.Done()
		if err := sub.Unsubscribe(); err != nil {
			r.Logger.Error("Error unsubscribing from NATS", "error", err)
		}
		close(messages)
	}()

	return messages, nil
}

// MessageStream is the resolver for the messageStream subscription.
func (r *subscriptionResolver) MessageStream(ctx context.Context, chatID string) (<-chan *model.MessageStreamPayload, error) {
	subject := fmt.Sprintf("chat.%s.stream", chatID)
	ch := make(chan *model.MessageStreamPayload, 12) // small buffer

	sub, err := r.Nc.Subscribe(subject, func(m *nats.Msg) {
		var p model.MessageStreamPayload
		if err := json.Unmarshal(m.Data, &p); err != nil {
			r.Logger.Warn("stream unmarshal error", "err", err)
			return
		}
		ch <- &p
	})
	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		_ = sub.Unsubscribe()
		close(ch)
	}()

	return ch, nil
}

// WhatsAppSyncStatus is the resolver for the whatsAppSyncStatus field.
func (r *subscriptionResolver) WhatsAppSyncStatus(ctx context.Context) (<-chan *model.WhatsAppSyncStatus, error) {
	whatsappSyncStatus := make(chan *model.WhatsAppSyncStatus, 10)
	subject := "whatsapp.sync.status"

	r.Logger.Info("Setting up WhatsApp sync status subscription", "subject", subject)

	sub, err := r.Nc.Subscribe(subject, func(msg *nats.Msg) {
		if msg == nil || len(msg.Data) == 0 {
			r.Logger.Error("Received nil or empty WhatsApp sync status message")
			return
		}

		r.Logger.Debug("Received WhatsApp sync status update", "data", string(msg.Data))

		var status model.WhatsAppSyncStatus
		if err := json.Unmarshal(msg.Data, &status); err != nil {
			r.Logger.Error("Failed to unmarshal WhatsApp sync status", "error", err, "data", string(msg.Data))
			return
		}

		r.Logger.Info("Processed WhatsApp sync status",
			"isSyncing", status.IsSyncing,
			"isCompleted", status.IsCompleted,
			"statusMessage", status.StatusMessage)

		select {
		case whatsappSyncStatus <- &status:
			r.Logger.Debug("Sent WhatsApp sync status to client")
		case <-ctx.Done():
			r.Logger.Info("Context canceled while sending WhatsApp sync status")
			return
		default:
			r.Logger.Warn("WhatsApp sync status channel is full, dropping message")
		}
	})
	if err != nil {
		r.Logger.Error("Failed to subscribe to WhatsApp sync status", "error", err)
		return nil, err
	}

	initialStatus := &model.WhatsAppSyncStatus{
		IsSyncing:   false,
		IsCompleted: false,
	}

	statusMessage := "Waiting for WhatsApp sync updates..."
	initialStatus.StatusMessage = &statusMessage

	go func() {
		select {
		case whatsappSyncStatus <- initialStatus:
			r.Logger.Info("Sent initial WhatsApp sync status to client")
		case <-time.After(1 * time.Second):
			r.Logger.Warn("Timeout sending initial WhatsApp sync status")
		}
	}()

	go func() {
		<-ctx.Done()
		r.Logger.Info("Unsubscribing from WhatsApp sync status")
		if err := sub.Unsubscribe(); err != nil {
			r.Logger.Error("Error unsubscribing from WhatsApp sync status", "error", err)
		}
		close(whatsappSyncStatus)
	}()

	return whatsappSyncStatus, nil
}

// IndexingStatus is the resolver for the indexingStatus field.
func (r *userProfileResolver) IndexingStatus(ctx context.Context, obj *model.UserProfile) (*model.IndexingStatus, error) {
	workflowID := "index"
	workflowRunID := "" // Empty string means latest run
	var stateQuery model.IndexingState
	encodedValue, err := r.TemporalClient.QueryWorkflow(
		ctx,
		workflowID,
		workflowRunID,
		"getIndexingState",
	)
	if err != nil {
		r.Logger.Error("Error querying workflow", "error", err)
		return nil, nil
	}

	if err := encodedValue.Get(&stateQuery); err != nil {
		r.Logger.Error("Error querying workflow", "error", err)
		return nil, nil
	}

	return &model.IndexingStatus{
		Status: stateQuery,
	}, nil
}

// ConnectedDataSources is the resolver for the connectedDataSources field.
func (r *userProfileResolver) ConnectedDataSources(ctx context.Context, obj *model.UserProfile) ([]*model.DataSource, error) {
	panic(fmt.Errorf("not implemented: ConnectedDataSources - connectedDataSources"))
}

// Chat returns ChatResolver implementation.
func (r *Resolver) Chat() ChatResolver { return &chatResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// UserProfile returns UserProfileResolver implementation.
func (r *Resolver) UserProfile() UserProfileResolver { return &userProfileResolver{r} }

type chatResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type userProfileResolver struct{ *Resolver }
