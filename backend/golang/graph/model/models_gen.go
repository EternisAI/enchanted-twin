// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Chat struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Messages  []*Message `json:"messages"`
	CreatedAt string     `json:"createdAt"`
}

type DataSource struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	Path      string `json:"path"`
	UpdatedAt string `json:"updatedAt"`
	IsIndexed bool   `json:"isIndexed"`
}

type IndexingStatus struct {
	Status                 IndexingState `json:"status"`
	ProcessingDataProgress int32         `json:"processingDataProgress"`
	IndexingDataProgress   int32         `json:"indexingDataProgress"`
}

type Message struct {
	ID          string      `json:"id"`
	Text        *string     `json:"text,omitempty"`
	ImageUrls   []string    `json:"imageUrls"`
	Role        Role        `json:"role"`
	ToolCalls   []*ToolCall `json:"toolCalls"`
	ToolResults []string    `json:"toolResults"`
	CreatedAt   string      `json:"createdAt"`
}

type Mutation struct {
}

type Query struct {
}

type Subscription struct {
}

type ToolCall struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	IsCompleted bool   `json:"isCompleted"`
}

type UpdateProfileInput struct {
	Name *string `json:"name,omitempty"`
}

type UserProfile struct {
	Name                 *string         `json:"name,omitempty"`
	IndexingStatus       *IndexingStatus `json:"indexingStatus,omitempty"`
	ConnectedDataSources []*DataSource   `json:"connectedDataSources"`
}

type IndexingState string

const (
	IndexingStateNotStarted       IndexingState = "NOT_STARTED"
	IndexingStateDownloadingModel IndexingState = "DOWNLOADING_MODEL"
	IndexingStateProcessingData   IndexingState = "PROCESSING_DATA"
	IndexingStateIndexingData     IndexingState = "INDEXING_DATA"
	IndexingStateCleanUp          IndexingState = "CLEAN_UP"
	IndexingStateCompleted        IndexingState = "COMPLETED"
)

var AllIndexingState = []IndexingState{
	IndexingStateNotStarted,
	IndexingStateDownloadingModel,
	IndexingStateProcessingData,
	IndexingStateIndexingData,
	IndexingStateCleanUp,
	IndexingStateCompleted,
}

func (e IndexingState) IsValid() bool {
	switch e {
	case IndexingStateNotStarted, IndexingStateDownloadingModel, IndexingStateProcessingData, IndexingStateIndexingData, IndexingStateCleanUp, IndexingStateCompleted:
		return true
	}
	return false
}

func (e IndexingState) String() string {
	return string(e)
}

func (e *IndexingState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IndexingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IndexingState", str)
	}
	return nil
}

func (e IndexingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser      Role = "USER"
	RoleAssistant Role = "ASSISTANT"
)

var AllRole = []Role{
	RoleUser,
	RoleAssistant,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAssistant:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
