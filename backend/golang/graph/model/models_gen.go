// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AppNotification struct {
	ID        string  `json:"id"`
	Title     string  `json:"title"`
	Message   string  `json:"message"`
	CreatedAt string  `json:"createdAt"`
	Image     *string `json:"image,omitempty"`
	Link      *string `json:"link,omitempty"`
}

type Chat struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	Messages  []*Message `json:"messages"`
	CreatedAt string     `json:"createdAt"`
}

type ChatSuggestionsCategory struct {
	Category    string   `json:"category"`
	Suggestions []string `json:"suggestions"`
}

type ConnectMCPServerInput struct {
	Name    string           `json:"name"`
	Command string           `json:"command"`
	Args    []string         `json:"args,omitempty"`
	Envs    []*KeyValueInput `json:"envs,omitempty"`
	Type    MCPServerType    `json:"type"`
}

type DataSource struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	Path          string `json:"path"`
	UpdatedAt     string `json:"updatedAt"`
	IsProcessed   bool   `json:"isProcessed"`
	IsIndexed     bool   `json:"isIndexed"`
	IndexProgress int32  `json:"indexProgress"`
	HasError      bool   `json:"hasError"`
}

type IndexingStatus struct {
	Status      IndexingState `json:"status"`
	DataSources []*DataSource `json:"dataSources"`
	Error       *string       `json:"error,omitempty"`
}

type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type KeyValueInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type MCPServer struct {
	ID        string        `json:"id"`
	Command   string        `json:"command"`
	Args      []string      `json:"args,omitempty"`
	Envs      []*KeyValue   `json:"envs,omitempty"`
	Name      string        `json:"name"`
	CreatedAt string        `json:"createdAt"`
	Enabled   bool          `json:"enabled"`
	Type      MCPServerType `json:"type"`
}

type MCPServerDefinition struct {
	ID        string        `json:"id"`
	Name      string        `json:"name"`
	Command   string        `json:"command"`
	Args      []string      `json:"args,omitempty"`
	Envs      []*KeyValue   `json:"envs,omitempty"`
	Type      MCPServerType `json:"type"`
	Connected bool          `json:"connected"`
	Enabled   bool          `json:"enabled"`
}

type Message struct {
	ID          string      `json:"id"`
	Text        *string     `json:"text,omitempty"`
	ImageUrls   []string    `json:"imageUrls"`
	Role        Role        `json:"role"`
	ToolCalls   []*ToolCall `json:"toolCalls"`
	ToolResults []string    `json:"toolResults"`
	CreatedAt   string      `json:"createdAt"`
}

type MessageStreamPayload struct {
	MessageID  string   `json:"messageId"`
	Chunk      string   `json:"chunk"`
	Role       Role     `json:"role"`
	IsComplete bool     `json:"isComplete"`
	CreatedAt  *string  `json:"createdAt,omitempty"`
	ImageUrls  []string `json:"imageUrls"`
}

type Mutation struct {
}

type OAuthFlow struct {
	AuthURL     string `json:"authURL"`
	RedirectURI string `json:"redirectURI"`
}

type OAuthStatus struct {
	Provider  string   `json:"provider"`
	ExpiresAt string   `json:"expiresAt"`
	Scope     []string `json:"scope"`
	Username  string   `json:"username"`
	Error     bool     `json:"error"`
}

type Query struct {
}

type Subscription struct {
}

type Tool struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type ToolCall struct {
	ID          string          `json:"id"`
	Name        string          `json:"name"`
	IsCompleted bool            `json:"isCompleted"`
	MessageID   string          `json:"messageId"`
	Result      *ToolCallResult `json:"result,omitempty"`
}

type ToolCallResult struct {
	Content   *string  `json:"content,omitempty"`
	ImageUrls []string `json:"imageUrls"`
}

type UpdateProfileInput struct {
	Name *string `json:"name,omitempty"`
	Bio  *string `json:"bio,omitempty"`
}

type UserProfile struct {
	Name                 *string         `json:"name,omitempty"`
	Bio                  *string         `json:"bio,omitempty"`
	IndexingStatus       *IndexingStatus `json:"indexingStatus,omitempty"`
	ConnectedDataSources []*DataSource   `json:"connectedDataSources"`
}

type IndexingState string

const (
	IndexingStateNotStarted       IndexingState = "NOT_STARTED"
	IndexingStateDownloadingModel IndexingState = "DOWNLOADING_MODEL"
	IndexingStateProcessingData   IndexingState = "PROCESSING_DATA"
	IndexingStateIndexingData     IndexingState = "INDEXING_DATA"
	IndexingStateCompleted        IndexingState = "COMPLETED"
	IndexingStateFailed           IndexingState = "FAILED"
)

var AllIndexingState = []IndexingState{
	IndexingStateNotStarted,
	IndexingStateDownloadingModel,
	IndexingStateProcessingData,
	IndexingStateIndexingData,
	IndexingStateCompleted,
	IndexingStateFailed,
}

func (e IndexingState) IsValid() bool {
	switch e {
	case IndexingStateNotStarted, IndexingStateDownloadingModel, IndexingStateProcessingData, IndexingStateIndexingData, IndexingStateCompleted, IndexingStateFailed:
		return true
	}
	return false
}

func (e IndexingState) String() string {
	return string(e)
}

func (e *IndexingState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IndexingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IndexingState", str)
	}
	return nil
}

func (e IndexingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MCPServerType string

const (
	MCPServerTypeTwitter    MCPServerType = "TWITTER"
	MCPServerTypeGoogle     MCPServerType = "GOOGLE"
	MCPServerTypeSLACk      MCPServerType = "SLACK"
	MCPServerTypeOther      MCPServerType = "OTHER"
	MCPServerTypeScreenpipe MCPServerType = "SCREENPIPE"
)

var AllMCPServerType = []MCPServerType{
	MCPServerTypeTwitter,
	MCPServerTypeGoogle,
	MCPServerTypeSLACk,
	MCPServerTypeOther,
	MCPServerTypeScreenpipe,
}

func (e MCPServerType) IsValid() bool {
	switch e {
	case MCPServerTypeTwitter, MCPServerTypeGoogle, MCPServerTypeSLACk, MCPServerTypeOther, MCPServerTypeScreenpipe:
		return true
	}
	return false
}

func (e MCPServerType) String() string {
	return string(e)
}

func (e *MCPServerType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MCPServerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MCPServerType", str)
	}
	return nil
}

func (e MCPServerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser      Role = "USER"
	RoleAssistant Role = "ASSISTANT"
)

var AllRole = []Role{
	RoleUser,
	RoleAssistant,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAssistant:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
