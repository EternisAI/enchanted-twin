scalar DateTime
scalar JSON

directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
  key: String!
  value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type UserProfile {
  name: String
  indexingStatus: IndexingStatus #latest workflow status
}

input UpdateProfileInput {
  name: String
}

type ToolCall {
  id: String!
  name: String!
  isCompleted: Boolean!
}

type Chat {
  id: ID!
  name: String!
  messages: [Message!]! @goField(forceResolver: true)
  createdAt: DateTime!
}

type Message {
  id: ID!
  text: String
  imageUrls: [String!]!
  role: Role!
  toolCalls: [ToolCall!]!
  toolResults: [String!]!
  createdAt: DateTime!
}

enum Role {
  USER
  ASSISTANT
}

type Query {
  profile: UserProfile!
  getChats(first: Int! = 10, offset: Int! = 0): [Chat!]!
  getChat(id: ID!): Chat!
  getDataSources: [DataSource!]!
}

type Mutation {
  updateProfile(input: UpdateProfileInput!): Boolean!
  createChat(name: String!): Chat!
  sendMessage(chatId: ID!, text: String!): Message!
  deleteChat(chatId: ID!): Chat!
  startIndexing(input: IndexingInput!): Boolean!
  addDataSource(name: String!, path: String!): Boolean!
}

type Subscription {
  messageAdded(chatId: ID!): Message!
  indexingStatus(dataSourceName: String!): IndexingStatus!
}

input IndexingInput {
  dataSourceName: String!
  sourcePath: String!
  username: String!
}

type DataSource {
  id: ID!
  name: String!
  path: String!
  updatedAt: DateTime!
  isIndexed: Boolean!
}

enum IndexingState {
  NOT_STARTED
  DOWNLOADING_MODEL
  PROCESSING_DATA #[1 part, 2 ?]
  INDEXING_DATA
  CLEAN_UP # delete `input_files`
  COMPLETED
}

type IndexingStatus {
  status: IndexingState!
  processingDataProgress: Int!
  indexingDataProgress: Int!
}
