scalar DateTime
scalar JSON

directive @goModel(
  model: String
  models: [String!]
  forceGenerate: Boolean
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @goTag(
  key: String!
  value: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type UserProfile {
  name: String
  bio: String
  indexingStatus: IndexingStatus @goField(forceResolver: true)
  connectedDataSources: [DataSource!]! @goField(forceResolver: true)
}

input UpdateProfileInput {
  name: String
  bio: String
}

type ToolCall {
  id: String!
  name: String!
  isCompleted: Boolean!
  messageId: String!
  result: ToolCallResult
}

type ToolCallResult {
  content: String
  imageUrls: [String!]!
}

type Chat {
  id: ID!
  name: String!
  messages: [Message!]! @goField(forceResolver: true)
  createdAt: DateTime!
  voice: Boolean!
}

type Message {
  id: ID!
  text: String
  imageUrls: [String!]!
  role: Role!
  toolCalls: [ToolCall!]!
  toolResults: [String!]!
  createdAt: DateTime!
}

enum Role {
  USER
  ASSISTANT
}

type MessageStreamPayload {
  messageId: ID!
  chunk: String!
  role: Role!
  isComplete: Boolean!
  createdAt: DateTime
  imageUrls: [String!]!
}

type OAuthStatus {
  provider: String!
  expiresAt: DateTime!
  scope: [String!]!
  username: String!
  error: Boolean!
}

type OAuthFlow {
  authURL: String!
  redirectURI: String!
}

type Query {
  profile: UserProfile!
  getChats(first: Int! = 10, offset: Int! = 0): [Chat!]!
  getChat(id: ID!): Chat!
  getDataSources: [DataSource!]!
  getOAuthStatus: [OAuthStatus!]!
  getChatSuggestions(chatId: ID!): [ChatSuggestionsCategory!]!
  getMCPServers: [MCPServerDefinition!]!
  getTools: [Tool!]!
  getWhatsAppStatus: WhatsAppStatus!
  getAgentTasks: [AgentTask!]!
  getSetupProgress: [SetupProgress!]!
}

type SetupProgress {
  name: String!
  progress: Float!
  status: String!
  required: Boolean!
}

type Mutation {
  # Start OAuth flow - returns URL to open in browser
  # The 'scope' parameter is a of scopes to request.
  startOAuthFlow(provider: String!, scope: String!): OAuthFlow!
  # Complete OAuth flow of 'state' with 'authCode' received from callback
  # On success, returns the provider which is now available
  completeOAuthFlow(state: String!, authCode: String!): String!
  refreshExpiredOAuthTokens: [OAuthStatus!]!
  updateProfile(input: UpdateProfileInput!): Boolean!
  createChat(name: String!, voice: Boolean! = False): Chat!
  sendMessage(
    chatId: ID!
    text: String!
    reasoning: Boolean! = False
    voice: Boolean! = False
  ): Message!
  deleteChat(chatId: ID!): Chat!
  startIndexing: Boolean!
  addDataSource(name: String!, path: String!): Boolean!
  deleteDataSource(id: ID!): Boolean!
  connectMCPServer(input: ConnectMCPServerInput!): Boolean!
  sendTelegramMessage(chatUUID: ID!, text: String!): Boolean!
  deleteAgentTask(id: ID!): Boolean!
  updateAgentTask(id: ID!, notify: Boolean!): Boolean!
  removeMCPServer(id: String!): Boolean!
  startWhatsAppConnection: Boolean!
}

type Subscription {
  messageAdded(chatId: ID!): Message!
  toolCallUpdated(chatId: ID!): ToolCall!
  indexingStatus: IndexingStatus!
  notificationAdded: AppNotification!
  telegramMessageAdded(chatUUID: ID!): Message!
  messageStream(chatId: ID!): MessageStreamPayload!
  whatsAppSyncStatus: WhatsAppSyncStatus!
}

type WhatsAppSyncStatus {
  isSyncing: Boolean!
  isCompleted: Boolean!
  error: String
  statusMessage: String
}

type DataSource {
  id: ID!
  name: String!
  path: String!
  updatedAt: DateTime!
  isProcessed: Boolean!
  isIndexed: Boolean!
  indexProgress: Int!
  hasError: Boolean!
}

enum IndexingState {
  NOT_STARTED
  DOWNLOADING_MODEL
  PROCESSING_DATA #[1 part, 2 ?]
  INDEXING_DATA
  COMPLETED
  FAILED
}

type IndexingStatus {
  status: IndexingState!
  dataSources: [DataSource!]!
  error: String
}

type ChatSuggestionsCategory {
  category: String!
  suggestions: [String!]!
}

input KeyValueInput {
  key: String!
  value: String!
}

type KeyValue {
  key: String!
  value: String!
}

enum MCPServerType {
  TWITTER
  GOOGLE
  SLACK
  OTHER
  SCREENPIPE
  ENCHANTED
}

input ConnectMCPServerInput {
  name: String!
  command: String!
  args: [String!]
  envs: [KeyValueInput!]
  type: MCPServerType!
}

type MCPServer {
  id: ID!
  command: String!
  args: [String!]
  envs: [KeyValue!]
  name: String!
  createdAt: DateTime!
  enabled: Boolean!
  type: MCPServerType!
}

type MCPServerDefinition {
  id: String!
  name: String!
  command: String!
  args: [String!]
  envs: [KeyValue!]
  type: MCPServerType!
  connected: Boolean!
  enabled: Boolean!
  tools: [Tool!]
}

type Tool {
  name: String!
  description: String!
}

type AppNotification {
  id: ID!
  title: String!
  message: String!
  createdAt: DateTime!
  image: String
  link: String
}

# WhatsApp integration
type WhatsAppStatus {
  isConnected: Boolean!
  qrCodeData: String
  statusMessage: String!
}

# WhatsApp QR code update for subscription
type WhatsAppQRCodeUpdate {
  qrCodeData: String
  event: String!
  timestamp: DateTime!
  isConnected: Boolean!
}

type AgentTask {
  id: ID!
  name: String!
  schedule: String!
  plan: String
  createdAt: DateTime!
  updatedAt: DateTime!
  completedAt: DateTime
  terminatedAt: DateTime
  output: String
  upcomingRuns: [DateTime!]!
  previousRuns: [DateTime!]!
  notify: Boolean!
}
