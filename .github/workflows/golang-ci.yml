name: Go CI (backend)

on:
  pull_request: # run on every PR so the status check always exists
    branches: [main, master]
  push:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine if backend/golang changed
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'backend/golang/**'

  lint-build-test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        working-directory: backend/golang

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: backend/golang/go.mod
          cache-dependency-path: backend/golang/go.sum

      - name: Lint only the diff
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1
          working-directory: backend/golang
          args: --timeout=10m --new-from-rev=origin/${{ github.event.pull_request.base.ref }}

      - name: Build
        run: make build

      - name: Test
        run: make test

  dead-code-check:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        working-directory: backend/golang

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: backend/golang/go.mod
          cache-dependency-path: backend/golang/go.sum

      - name: Check for dead code
        run: |
          deadcode_output=$(go run golang.org/x/tools/cmd/deadcode@latest ./... 2>/dev/null || true)
          if [ -n "$deadcode_output" ]; then
            echo "‚ùå Dead code found! Please remove the following:"
            echo "$deadcode_output"
            exit 1
          else
            echo "‚úÖ No dead code found"
          fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    defaults:
      run:
        working-directory: backend/golang
    env:
      COMPLETIONS_API_KEY: ${{ secrets.COMPLETIONS_API_KEY }}
      EMBEDDINGS_API_KEY: ${{ secrets.EMBEDDINGS_API_KEY }}
      TELEGRAM_CHAT_SERVER: ${{ secrets.TELEGRAM_CHAT_SERVER }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: backend/golang/go.mod
          cache-dependency-path: backend/golang/go.sum

      - name: Run integration tests
        run: |
          # Create output directory if it doesn't exist
          mkdir -p ./output

          # Check if required API keys are available
          if [ -z "$COMPLETIONS_API_KEY" ] || [ -z "$EMBEDDINGS_API_KEY" ]; then
            echo "‚ùå Integration tests failed - API keys not available"
            echo "Please set COMPLETIONS_API_KEY and EMBEDDINGS_API_KEY in GitHub secrets"
            exit 1
          fi

          # Check if integration test data exists (using misc directory which is the default)
          if [ ! -d "pkg/dataprocessing/integration/testdata/misc" ]; then
            echo "‚ùå Integration tests failed - test data not available"
            echo "Expected testdata/misc directory not found"
            exit 1
          fi

          echo "üß™ Running integration tests..."
          make test-integration
