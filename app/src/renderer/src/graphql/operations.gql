query GetProfile {
  profile {
    name
  }
}

query GetChats($first: Int!, $offset: Int!) {
  getChats(first: $first, offset: $offset) {
    id
    name
    createdAt
    category
    holonThreadId
    privacyDictJson
    messages {
      id
      text
      role
      createdAt
      imageUrls
      toolCalls {
        id
        name
        isCompleted
        messageId
        result {
          content
          imageUrls
        }
        error
      }
      toolResults
    }
  }
}

query GetChat($id: ID!) {
  getChat(id: $id) {
    id
    name
    createdAt
    category
    holonThreadId
    privacyDictJson
    messages {
      id
      text
      imageUrls
      role
      createdAt
      toolCalls {
        id
        name
        isCompleted
        messageId
        result {
          content
          imageUrls
        }
        error
      }
      toolResults
    }
  }
}

query GetDataSources {
  getDataSources {
    id
    name
    path
    updatedAt
    isProcessed
    isIndexed
    indexProgress
    hasError
  }
}

query GetOAuthStatus {
  getOAuthStatus {
    provider
    expiresAt
    scope
  }
}

query GetChatSuggestions($chatId: ID!) {
  getChatSuggestions(chatId: $chatId) {
    category
    suggestions
  }
}

query GetMCPServers {
  getMCPServers {
    id
    name
    command
    args
    envs {
      key
      value
    }
    type
    enabled
    connected
  }
}

query GetAgentTasks {
  getAgentTasks {
    id
    name
    schedule
    plan
    createdAt
    updatedAt
    completedAt
    terminatedAt
    output
    notify
  }
}

query GetTools {
  getTools {
    name
    description
  }
}

query GetSetupProgress {
  getSetupProgress {
    name
    status
    progress
    required
  }
}

query GetWhitelistStatus {
  whitelistStatus
}

query GetTrackedFolders {
  getTrackedFolders {
    id
    name
    path
    isEnabled
    createdAt
    updatedAt
  }
}

query GetDirectoryWatcherStatus {
  getDirectoryWatcherStatus {
    isRunning
    watchedDirectories
    trackedFoldersFromDB {
      id
      name
      path
      isEnabled
      createdAt
      updatedAt
    }
    errorMessage
  }
}

mutation CreateChat(
  $name: String!
  $category: ChatCategory! = TEXT
  $holonThreadId: String
  $initialMessage: String
  $isReasoning: Boolean! = false
) {
  createChat(
    name: $name
    category: $category
    holonThreadId: $holonThreadId
    initialMessage: $initialMessage
    isReasoning: $isReasoning
  ) {
    id
    name
    createdAt
    category
    holonThreadId
    privacyDictJson
  }
}

mutation SendMessage($chatId: ID!, $text: String!, $reasoning: Boolean!, $voice: Boolean!) {
  sendMessage(chatId: $chatId, text: $text, reasoning: $reasoning, voice: $voice) {
    id
    text
    role
    createdAt
    imageUrls
    toolResults
    toolCalls {
      id
      name
      isCompleted
      result {
        content
        imageUrls
      }
      error
    }
  }
}

mutation DeleteChat($chatId: ID!) {
  deleteChat(chatId: $chatId) {
    id
    name
  }
}

mutation UpdateProfile($input: UpdateProfileInput!) {
  updateProfile(input: $input)
}

mutation ActivateInviteCode($inviteCode: String!) {
  activate(inviteCode: $inviteCode)
}

subscription MessageAdded($chatId: ID!) {
  messageAdded(chatId: $chatId) {
    id
    text
    role
    createdAt
    imageUrls
    toolResults
    toolCalls {
      id
      name
      isCompleted
      messageId
      result {
        content
        imageUrls
      }
      error
    }
  }
}

subscription ToolCallUpdated($chatId: ID!) {
  toolCallUpdated(chatId: $chatId) {
    id
    name
    isCompleted
    messageId
    result {
      content
      imageUrls
    }
    error
  }
}

subscription IndexingStatus {
  indexingStatus {
    status
    error
    dataSources {
      id
      name
      isProcessed
      isIndexed
      indexProgress
      hasError
    }
  }
}

subscription NotificationAdded {
  notificationAdded {
    id
    title
    message
    image
    link
    createdAt
  }
}

subscription MessageStream($chatId: ID!) {
  messageStream(chatId: $chatId) {
    messageId
    chunk
    role
    isComplete
    createdAt
    imageUrls
    accumulatedMessage
    deanonymizedAccumulatedMessage
  }
}

subscription WhatsAppSyncStatus {
  whatsAppSyncStatus {
    isSyncing
    isCompleted
    error
    statusMessage
  }
}

subscription PrivacyDictUpdated($chatId: ID!) {
  privacyDictUpdated(chatId: $chatId) {
    privacyDictJson
  }
}

subscription ProcessMessageHistoryStream(
  $chatId: ID!
  $messages: [MessageInput!]!
  $isOnboarding: Boolean!
) {
  processMessageHistoryStream(chatId: $chatId, messages: $messages, isOnboarding: $isOnboarding) {
    messageId
    chunk
    role
    isComplete
    createdAt
    imageUrls
  }
}

mutation AddDataSource($name: String!, $path: String!) {
  addDataSource(name: $name, path: $path)
}

mutation DeleteDataSource($id: ID!) {
  deleteDataSource(id: $id)
}

mutation StartOAuthFlow($provider: String!, $scope: String!) {
  startOAuthFlow(provider: $provider, scope: $scope) {
    authURL
    redirectURI
  }
}

mutation CompleteOAuthFlow($state: String!, $authCode: String!) {
  completeOAuthFlow(state: $state, authCode: $authCode)
}

mutation DeleteAgentTask($id: ID!) {
  deleteAgentTask(id: $id)
}

mutation UpdateAgentTask($id: ID!, $notify: Boolean!) {
  updateAgentTask(id: $id, notify: $notify)
}

mutation ConnectMCPServer($input: ConnectMCPServerInput!) {
  connectMCPServer(input: $input)
}

mutation RemoveMCPServer($id: String!) {
  removeMCPServer(id: $id)
}

query GetWhatsAppStatus {
  getWhatsAppStatus {
    isConnected
    qrCodeData
    statusMessage
  }
}

query GetThreads($network: String, $first: Int! = 10, $offset: Int! = 0) {
  getThreads(network: $network, first: $first, offset: $offset) {
    id
    title
    content
    imageURLs
    author {
      alias
      identity
    }
    createdAt
    expiresAt
    messages {
      id
      author {
        alias
        identity
      }
      content
      createdAt
      isDelivered
      actions
      state
    }
    actions
    views
  }
}

query GetThread($network: String, $id: ID!) {
  getThread(network: $network, id: $id) {
    id
    title
    content
    imageURLs
    author {
      alias
      identity
    }
    createdAt
    expiresAt
    messages {
      id
      author {
        alias
        identity
      }
      content
      createdAt
      isDelivered
      actions
      state
    }
    actions
    views
  }
}

query GetHolons($userId: ID!) {
  getHolons(userId: $userId)
}

mutation JoinHolon($userId: String!, $network: String) {
  joinHolon(userId: $userId, network: $network)
}

mutation StartWhatsAppConnection {
  startWhatsAppConnection
}

mutation StoreToken($input: StoreTokenInput!) {
  storeToken(input: $input)
}

mutation AddTrackedFolder($input: AddTrackedFolderInput!) {
  addTrackedFolder(input: $input) {
    id
    name
    path
    isEnabled
    createdAt
    updatedAt
  }
}

mutation DeleteTrackedFolder($id: ID!) {
  deleteTrackedFolder(id: $id)
}

mutation UpdateTrackedFolder($id: ID!, $input: UpdateTrackedFolderInput!) {
  updateTrackedFolder(id: $id, input: $input)
}
