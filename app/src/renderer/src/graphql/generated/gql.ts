/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nmutation CreateChat($name: String!) {\n  createChat(name: $name) {\n    id\n    name\n    createdAt\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!) {\n  sendMessage(chatId: $chatId, text: $text) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope)\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}": typeof types.GetProfileDocument,
};
const documents: Documents = {
    "query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nmutation CreateChat($name: String!) {\n  createChat(name: $name) {\n    id\n    name\n    createdAt\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!) {\n  sendMessage(chatId: $chatId, text: $text) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope)\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}": types.GetProfileDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nmutation CreateChat($name: String!) {\n  createChat(name: $name) {\n    id\n    name\n    createdAt\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!) {\n  sendMessage(chatId: $chatId, text: $text) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope)\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}"): (typeof documents)["query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nmutation CreateChat($name: String!) {\n  createChat(name: $name) {\n    id\n    name\n    createdAt\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!) {\n  sendMessage(chatId: $chatId, text: $text) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope)\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;