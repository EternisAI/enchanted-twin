/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetDataSources {\n  getDataSources {\n    id\n    name\n    path\n    updatedAt\n    isProcessed\n    isIndexed\n    indexProgress\n    hasError\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nquery GetChatSuggestions($chatId: ID!) {\n  getChatSuggestions(chatId: $chatId) {\n    category\n    suggestions\n  }\n}\n\nquery GetMCPServers {\n  getMCPServers {\n    id\n    name\n    command\n    args\n    envs {\n      key\n      value\n    }\n    type\n    enabled\n    connected\n  }\n}\n\nquery GetAgentTasks {\n  getAgentTasks {\n    id\n    name\n    schedule\n    plan\n    createdAt\n    updatedAt\n    completedAt\n    terminatedAt\n    output\n    notify\n  }\n}\n\nquery GetTools {\n  getTools {\n    name\n    description\n  }\n}\n\nquery GetSetupProgress {\n  getSetupProgress {\n    name\n    status\n    progress\n    required\n  }\n}\n\nquery GetWhitelistStatus {\n  whitelistStatus\n}\n\nquery GetTrackedFolders {\n  getTrackedFolders {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetDirectoryWatcherStatus {\n  getDirectoryWatcherStatus {\n    isRunning\n    watchedDirectories\n    trackedFoldersFromDB {\n      id\n      name\n      path\n      isEnabled\n      createdAt\n      updatedAt\n    }\n    errorMessage\n  }\n}\n\nmutation CreateChat($name: String!, $category: ChatCategory! = TEXT, $holonThreadId: String, $initialMessage: String) {\n  createChat(\n    name: $name\n    category: $category\n    holonThreadId: $holonThreadId\n    initialMessage: $initialMessage\n  ) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!, $reasoning: Boolean!, $voice: Boolean!) {\n  sendMessage(chatId: $chatId, text: $text, reasoning: $reasoning, voice: $voice) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nmutation UpdateProfile($input: UpdateProfileInput!) {\n  updateProfile(input: $input)\n}\n\nmutation ActivateInviteCode($inviteCode: String!) {\n  activate(inviteCode: $inviteCode)\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n    result {\n      content\n      imageUrls\n    }\n  }\n}\n\nsubscription IndexingStatus {\n  indexingStatus {\n    status\n    error\n    dataSources {\n      id\n      name\n      isProcessed\n      isIndexed\n      indexProgress\n      hasError\n    }\n  }\n}\n\nsubscription NotificationAdded {\n  notificationAdded {\n    id\n    title\n    message\n    image\n    link\n    createdAt\n  }\n}\n\nsubscription MessageStream($chatId: ID!) {\n  messageStream(chatId: $chatId) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nsubscription WhatsAppSyncStatus {\n  whatsAppSyncStatus {\n    isSyncing\n    isCompleted\n    error\n    statusMessage\n  }\n}\n\nsubscription PrivacyDictUpdated($chatId: ID!) {\n  privacyDictUpdated(chatId: $chatId) {\n    privacyDictJson\n  }\n}\n\nsubscription ProcessMessageHistoryStream($chatId: ID!, $messages: [MessageInput!]!, $isOnboarding: Boolean!) {\n  processMessageHistoryStream(\n    chatId: $chatId\n    messages: $messages\n    isOnboarding: $isOnboarding\n  ) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope) {\n    authURL\n    redirectURI\n  }\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}\n\nmutation DeleteAgentTask($id: ID!) {\n  deleteAgentTask(id: $id)\n}\n\nmutation UpdateAgentTask($id: ID!, $notify: Boolean!) {\n  updateAgentTask(id: $id, notify: $notify)\n}\n\nmutation ConnectMCPServer($input: ConnectMCPServerInput!) {\n  connectMCPServer(input: $input)\n}\n\nmutation RemoveMCPServer($id: String!) {\n  removeMCPServer(id: $id)\n}\n\nquery GetWhatsAppStatus {\n  getWhatsAppStatus {\n    isConnected\n    qrCodeData\n    statusMessage\n  }\n}\n\nquery GetThreads($network: String, $first: Int! = 10, $offset: Int! = 0) {\n  getThreads(network: $network, first: $first, offset: $offset) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetThread($network: String, $id: ID!) {\n  getThread(network: $network, id: $id) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetHolons($userId: ID!) {\n  getHolons(userId: $userId)\n}\n\nmutation JoinHolon($userId: String!, $network: String) {\n  joinHolon(userId: $userId, network: $network)\n}\n\nmutation StartWhatsAppConnection {\n  startWhatsAppConnection\n}\n\nmutation StoreToken($input: StoreTokenInput!) {\n  storeToken(input: $input)\n}\n\nmutation AddTrackedFolder($input: AddTrackedFolderInput!) {\n  addTrackedFolder(input: $input) {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteTrackedFolder($id: ID!) {\n  deleteTrackedFolder(id: $id)\n}\n\nmutation UpdateTrackedFolder($id: ID!, $input: UpdateTrackedFolderInput!) {\n  updateTrackedFolder(id: $id, input: $input)\n}": typeof types.GetProfileDocument,
};
const documents: Documents = {
    "query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetDataSources {\n  getDataSources {\n    id\n    name\n    path\n    updatedAt\n    isProcessed\n    isIndexed\n    indexProgress\n    hasError\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nquery GetChatSuggestions($chatId: ID!) {\n  getChatSuggestions(chatId: $chatId) {\n    category\n    suggestions\n  }\n}\n\nquery GetMCPServers {\n  getMCPServers {\n    id\n    name\n    command\n    args\n    envs {\n      key\n      value\n    }\n    type\n    enabled\n    connected\n  }\n}\n\nquery GetAgentTasks {\n  getAgentTasks {\n    id\n    name\n    schedule\n    plan\n    createdAt\n    updatedAt\n    completedAt\n    terminatedAt\n    output\n    notify\n  }\n}\n\nquery GetTools {\n  getTools {\n    name\n    description\n  }\n}\n\nquery GetSetupProgress {\n  getSetupProgress {\n    name\n    status\n    progress\n    required\n  }\n}\n\nquery GetWhitelistStatus {\n  whitelistStatus\n}\n\nquery GetTrackedFolders {\n  getTrackedFolders {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetDirectoryWatcherStatus {\n  getDirectoryWatcherStatus {\n    isRunning\n    watchedDirectories\n    trackedFoldersFromDB {\n      id\n      name\n      path\n      isEnabled\n      createdAt\n      updatedAt\n    }\n    errorMessage\n  }\n}\n\nmutation CreateChat($name: String!, $category: ChatCategory! = TEXT, $holonThreadId: String, $initialMessage: String) {\n  createChat(\n    name: $name\n    category: $category\n    holonThreadId: $holonThreadId\n    initialMessage: $initialMessage\n  ) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!, $reasoning: Boolean!, $voice: Boolean!) {\n  sendMessage(chatId: $chatId, text: $text, reasoning: $reasoning, voice: $voice) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nmutation UpdateProfile($input: UpdateProfileInput!) {\n  updateProfile(input: $input)\n}\n\nmutation ActivateInviteCode($inviteCode: String!) {\n  activate(inviteCode: $inviteCode)\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n    result {\n      content\n      imageUrls\n    }\n  }\n}\n\nsubscription IndexingStatus {\n  indexingStatus {\n    status\n    error\n    dataSources {\n      id\n      name\n      isProcessed\n      isIndexed\n      indexProgress\n      hasError\n    }\n  }\n}\n\nsubscription NotificationAdded {\n  notificationAdded {\n    id\n    title\n    message\n    image\n    link\n    createdAt\n  }\n}\n\nsubscription MessageStream($chatId: ID!) {\n  messageStream(chatId: $chatId) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nsubscription WhatsAppSyncStatus {\n  whatsAppSyncStatus {\n    isSyncing\n    isCompleted\n    error\n    statusMessage\n  }\n}\n\nsubscription PrivacyDictUpdated($chatId: ID!) {\n  privacyDictUpdated(chatId: $chatId) {\n    privacyDictJson\n  }\n}\n\nsubscription ProcessMessageHistoryStream($chatId: ID!, $messages: [MessageInput!]!, $isOnboarding: Boolean!) {\n  processMessageHistoryStream(\n    chatId: $chatId\n    messages: $messages\n    isOnboarding: $isOnboarding\n  ) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope) {\n    authURL\n    redirectURI\n  }\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}\n\nmutation DeleteAgentTask($id: ID!) {\n  deleteAgentTask(id: $id)\n}\n\nmutation UpdateAgentTask($id: ID!, $notify: Boolean!) {\n  updateAgentTask(id: $id, notify: $notify)\n}\n\nmutation ConnectMCPServer($input: ConnectMCPServerInput!) {\n  connectMCPServer(input: $input)\n}\n\nmutation RemoveMCPServer($id: String!) {\n  removeMCPServer(id: $id)\n}\n\nquery GetWhatsAppStatus {\n  getWhatsAppStatus {\n    isConnected\n    qrCodeData\n    statusMessage\n  }\n}\n\nquery GetThreads($network: String, $first: Int! = 10, $offset: Int! = 0) {\n  getThreads(network: $network, first: $first, offset: $offset) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetThread($network: String, $id: ID!) {\n  getThread(network: $network, id: $id) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetHolons($userId: ID!) {\n  getHolons(userId: $userId)\n}\n\nmutation JoinHolon($userId: String!, $network: String) {\n  joinHolon(userId: $userId, network: $network)\n}\n\nmutation StartWhatsAppConnection {\n  startWhatsAppConnection\n}\n\nmutation StoreToken($input: StoreTokenInput!) {\n  storeToken(input: $input)\n}\n\nmutation AddTrackedFolder($input: AddTrackedFolderInput!) {\n  addTrackedFolder(input: $input) {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteTrackedFolder($id: ID!) {\n  deleteTrackedFolder(id: $id)\n}\n\nmutation UpdateTrackedFolder($id: ID!, $input: UpdateTrackedFolderInput!) {\n  updateTrackedFolder(id: $id, input: $input)\n}": types.GetProfileDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetDataSources {\n  getDataSources {\n    id\n    name\n    path\n    updatedAt\n    isProcessed\n    isIndexed\n    indexProgress\n    hasError\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nquery GetChatSuggestions($chatId: ID!) {\n  getChatSuggestions(chatId: $chatId) {\n    category\n    suggestions\n  }\n}\n\nquery GetMCPServers {\n  getMCPServers {\n    id\n    name\n    command\n    args\n    envs {\n      key\n      value\n    }\n    type\n    enabled\n    connected\n  }\n}\n\nquery GetAgentTasks {\n  getAgentTasks {\n    id\n    name\n    schedule\n    plan\n    createdAt\n    updatedAt\n    completedAt\n    terminatedAt\n    output\n    notify\n  }\n}\n\nquery GetTools {\n  getTools {\n    name\n    description\n  }\n}\n\nquery GetSetupProgress {\n  getSetupProgress {\n    name\n    status\n    progress\n    required\n  }\n}\n\nquery GetWhitelistStatus {\n  whitelistStatus\n}\n\nquery GetTrackedFolders {\n  getTrackedFolders {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetDirectoryWatcherStatus {\n  getDirectoryWatcherStatus {\n    isRunning\n    watchedDirectories\n    trackedFoldersFromDB {\n      id\n      name\n      path\n      isEnabled\n      createdAt\n      updatedAt\n    }\n    errorMessage\n  }\n}\n\nmutation CreateChat($name: String!, $category: ChatCategory! = TEXT, $holonThreadId: String, $initialMessage: String) {\n  createChat(\n    name: $name\n    category: $category\n    holonThreadId: $holonThreadId\n    initialMessage: $initialMessage\n  ) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!, $reasoning: Boolean!, $voice: Boolean!) {\n  sendMessage(chatId: $chatId, text: $text, reasoning: $reasoning, voice: $voice) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nmutation UpdateProfile($input: UpdateProfileInput!) {\n  updateProfile(input: $input)\n}\n\nmutation ActivateInviteCode($inviteCode: String!) {\n  activate(inviteCode: $inviteCode)\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n    result {\n      content\n      imageUrls\n    }\n  }\n}\n\nsubscription IndexingStatus {\n  indexingStatus {\n    status\n    error\n    dataSources {\n      id\n      name\n      isProcessed\n      isIndexed\n      indexProgress\n      hasError\n    }\n  }\n}\n\nsubscription NotificationAdded {\n  notificationAdded {\n    id\n    title\n    message\n    image\n    link\n    createdAt\n  }\n}\n\nsubscription MessageStream($chatId: ID!) {\n  messageStream(chatId: $chatId) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nsubscription WhatsAppSyncStatus {\n  whatsAppSyncStatus {\n    isSyncing\n    isCompleted\n    error\n    statusMessage\n  }\n}\n\nsubscription PrivacyDictUpdated($chatId: ID!) {\n  privacyDictUpdated(chatId: $chatId) {\n    privacyDictJson\n  }\n}\n\nsubscription ProcessMessageHistoryStream($chatId: ID!, $messages: [MessageInput!]!, $isOnboarding: Boolean!) {\n  processMessageHistoryStream(\n    chatId: $chatId\n    messages: $messages\n    isOnboarding: $isOnboarding\n  ) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope) {\n    authURL\n    redirectURI\n  }\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}\n\nmutation DeleteAgentTask($id: ID!) {\n  deleteAgentTask(id: $id)\n}\n\nmutation UpdateAgentTask($id: ID!, $notify: Boolean!) {\n  updateAgentTask(id: $id, notify: $notify)\n}\n\nmutation ConnectMCPServer($input: ConnectMCPServerInput!) {\n  connectMCPServer(input: $input)\n}\n\nmutation RemoveMCPServer($id: String!) {\n  removeMCPServer(id: $id)\n}\n\nquery GetWhatsAppStatus {\n  getWhatsAppStatus {\n    isConnected\n    qrCodeData\n    statusMessage\n  }\n}\n\nquery GetThreads($network: String, $first: Int! = 10, $offset: Int! = 0) {\n  getThreads(network: $network, first: $first, offset: $offset) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetThread($network: String, $id: ID!) {\n  getThread(network: $network, id: $id) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetHolons($userId: ID!) {\n  getHolons(userId: $userId)\n}\n\nmutation JoinHolon($userId: String!, $network: String) {\n  joinHolon(userId: $userId, network: $network)\n}\n\nmutation StartWhatsAppConnection {\n  startWhatsAppConnection\n}\n\nmutation StoreToken($input: StoreTokenInput!) {\n  storeToken(input: $input)\n}\n\nmutation AddTrackedFolder($input: AddTrackedFolderInput!) {\n  addTrackedFolder(input: $input) {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteTrackedFolder($id: ID!) {\n  deleteTrackedFolder(id: $id)\n}\n\nmutation UpdateTrackedFolder($id: ID!, $input: UpdateTrackedFolderInput!) {\n  updateTrackedFolder(id: $id, input: $input)\n}"): (typeof documents)["query GetProfile {\n  profile {\n    name\n  }\n}\n\nquery GetChats($first: Int!, $offset: Int!) {\n  getChats(first: $first, offset: $offset) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      role\n      createdAt\n      imageUrls\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetChat($id: ID!) {\n  getChat(id: $id) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n    messages {\n      id\n      text\n      imageUrls\n      role\n      createdAt\n      toolCalls {\n        id\n        name\n        isCompleted\n        messageId\n        result {\n          content\n          imageUrls\n        }\n      }\n      toolResults\n    }\n  }\n}\n\nquery GetDataSources {\n  getDataSources {\n    id\n    name\n    path\n    updatedAt\n    isProcessed\n    isIndexed\n    indexProgress\n    hasError\n  }\n}\n\nquery GetOAuthStatus {\n  getOAuthStatus {\n    provider\n    expiresAt\n    scope\n  }\n}\n\nquery GetChatSuggestions($chatId: ID!) {\n  getChatSuggestions(chatId: $chatId) {\n    category\n    suggestions\n  }\n}\n\nquery GetMCPServers {\n  getMCPServers {\n    id\n    name\n    command\n    args\n    envs {\n      key\n      value\n    }\n    type\n    enabled\n    connected\n  }\n}\n\nquery GetAgentTasks {\n  getAgentTasks {\n    id\n    name\n    schedule\n    plan\n    createdAt\n    updatedAt\n    completedAt\n    terminatedAt\n    output\n    notify\n  }\n}\n\nquery GetTools {\n  getTools {\n    name\n    description\n  }\n}\n\nquery GetSetupProgress {\n  getSetupProgress {\n    name\n    status\n    progress\n    required\n  }\n}\n\nquery GetWhitelistStatus {\n  whitelistStatus\n}\n\nquery GetTrackedFolders {\n  getTrackedFolders {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nquery GetDirectoryWatcherStatus {\n  getDirectoryWatcherStatus {\n    isRunning\n    watchedDirectories\n    trackedFoldersFromDB {\n      id\n      name\n      path\n      isEnabled\n      createdAt\n      updatedAt\n    }\n    errorMessage\n  }\n}\n\nmutation CreateChat($name: String!, $category: ChatCategory! = TEXT, $holonThreadId: String, $initialMessage: String) {\n  createChat(\n    name: $name\n    category: $category\n    holonThreadId: $holonThreadId\n    initialMessage: $initialMessage\n  ) {\n    id\n    name\n    createdAt\n    category\n    holonThreadId\n    privacyDictJson\n  }\n}\n\nmutation SendMessage($chatId: ID!, $text: String!, $reasoning: Boolean!, $voice: Boolean!) {\n  sendMessage(chatId: $chatId, text: $text, reasoning: $reasoning, voice: $voice) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nmutation DeleteChat($chatId: ID!) {\n  deleteChat(chatId: $chatId) {\n    id\n    name\n  }\n}\n\nmutation UpdateProfile($input: UpdateProfileInput!) {\n  updateProfile(input: $input)\n}\n\nmutation ActivateInviteCode($inviteCode: String!) {\n  activate(inviteCode: $inviteCode)\n}\n\nsubscription MessageAdded($chatId: ID!) {\n  messageAdded(chatId: $chatId) {\n    id\n    text\n    role\n    createdAt\n    imageUrls\n    toolResults\n    toolCalls {\n      id\n      name\n      isCompleted\n      messageId\n      result {\n        content\n        imageUrls\n      }\n    }\n  }\n}\n\nsubscription ToolCallUpdated($chatId: ID!) {\n  toolCallUpdated(chatId: $chatId) {\n    id\n    name\n    isCompleted\n    messageId\n    result {\n      content\n      imageUrls\n    }\n  }\n}\n\nsubscription IndexingStatus {\n  indexingStatus {\n    status\n    error\n    dataSources {\n      id\n      name\n      isProcessed\n      isIndexed\n      indexProgress\n      hasError\n    }\n  }\n}\n\nsubscription NotificationAdded {\n  notificationAdded {\n    id\n    title\n    message\n    image\n    link\n    createdAt\n  }\n}\n\nsubscription MessageStream($chatId: ID!) {\n  messageStream(chatId: $chatId) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nsubscription WhatsAppSyncStatus {\n  whatsAppSyncStatus {\n    isSyncing\n    isCompleted\n    error\n    statusMessage\n  }\n}\n\nsubscription PrivacyDictUpdated($chatId: ID!) {\n  privacyDictUpdated(chatId: $chatId) {\n    privacyDictJson\n  }\n}\n\nsubscription ProcessMessageHistoryStream($chatId: ID!, $messages: [MessageInput!]!, $isOnboarding: Boolean!) {\n  processMessageHistoryStream(\n    chatId: $chatId\n    messages: $messages\n    isOnboarding: $isOnboarding\n  ) {\n    messageId\n    chunk\n    role\n    isComplete\n    createdAt\n    imageUrls\n  }\n}\n\nmutation AddDataSource($name: String!, $path: String!) {\n  addDataSource(name: $name, path: $path)\n}\n\nmutation DeleteDataSource($id: ID!) {\n  deleteDataSource(id: $id)\n}\n\nmutation StartOAuthFlow($provider: String!, $scope: String!) {\n  startOAuthFlow(provider: $provider, scope: $scope) {\n    authURL\n    redirectURI\n  }\n}\n\nmutation CompleteOAuthFlow($state: String!, $authCode: String!) {\n  completeOAuthFlow(state: $state, authCode: $authCode)\n}\n\nmutation DeleteAgentTask($id: ID!) {\n  deleteAgentTask(id: $id)\n}\n\nmutation UpdateAgentTask($id: ID!, $notify: Boolean!) {\n  updateAgentTask(id: $id, notify: $notify)\n}\n\nmutation ConnectMCPServer($input: ConnectMCPServerInput!) {\n  connectMCPServer(input: $input)\n}\n\nmutation RemoveMCPServer($id: String!) {\n  removeMCPServer(id: $id)\n}\n\nquery GetWhatsAppStatus {\n  getWhatsAppStatus {\n    isConnected\n    qrCodeData\n    statusMessage\n  }\n}\n\nquery GetThreads($network: String, $first: Int! = 10, $offset: Int! = 0) {\n  getThreads(network: $network, first: $first, offset: $offset) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetThread($network: String, $id: ID!) {\n  getThread(network: $network, id: $id) {\n    id\n    title\n    content\n    imageURLs\n    author {\n      alias\n      identity\n    }\n    createdAt\n    expiresAt\n    messages {\n      id\n      author {\n        alias\n        identity\n      }\n      content\n      createdAt\n      isDelivered\n      actions\n      state\n    }\n    actions\n    views\n  }\n}\n\nquery GetHolons($userId: ID!) {\n  getHolons(userId: $userId)\n}\n\nmutation JoinHolon($userId: String!, $network: String) {\n  joinHolon(userId: $userId, network: $network)\n}\n\nmutation StartWhatsAppConnection {\n  startWhatsAppConnection\n}\n\nmutation StoreToken($input: StoreTokenInput!) {\n  storeToken(input: $input)\n}\n\nmutation AddTrackedFolder($input: AddTrackedFolderInput!) {\n  addTrackedFolder(input: $input) {\n    id\n    name\n    path\n    isEnabled\n    createdAt\n    updatedAt\n  }\n}\n\nmutation DeleteTrackedFolder($id: ID!) {\n  deleteTrackedFolder(id: $id)\n}\n\nmutation UpdateTrackedFolder($id: ID!, $input: UpdateTrackedFolderInput!) {\n  updateTrackedFolder(id: $id, input: $input)\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;